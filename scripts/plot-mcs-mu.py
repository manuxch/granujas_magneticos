#!/bin/env python3
'''Programa para el análisis del tamaño máximo de clusters utilizando grafos.'''

import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
mpl.rcParams["errorbar.capsize"] = 5

d_mu, d_mcs, d_sdmcs = np.loadtxt('disks-mu.out', delimiter=',', unpack=True)

# fig, ax = plt.subplots(2,2, figsize=(10, 8), sharey=True)
alp = 0.5
plt.errorbar(d_mu, d_mcs, yerr=d_sdmcs, fmt='o-', label=r"$\phi = 0.1")
plt.xlabel(r"abs$(\mu_1/\mu_2)$")
plt.ylabel(r"$\max(C_s)/N_T$")
plt.show()
plt.legend()

quit()
ax[0, 0].errorbar(p_350, mcs_350, yerr=sdmcs_350, fmt='o-', label=r"$\phi = 0.214$", alpha=alp)
ax[0, 0].errorbar(p_525, mcs_525, yerr=sdmcs_525, fmt='o-', label=r"$\phi = 0.321$", alpha=alp)
ax[0, 0].errorbar(p_700, mcs_700, yerr=sdmcs_700, fmt='o-', label=r"$\phi = 0.428$", alpha=alp)
ax[0,0].legend(title='Discos', loc=2)
ax[0, 0].grid()
# ax[0, 0].set_ylim([0, 1.1])
ax[0, 0].set_ylabel(r"$\max(C_s)/N_T$")
ax[0, 1].errorbar(tp_350, tmcs_350, yerr=tsdmcs_350, fmt='^-', label=r"$\phi = 0.214$", alpha=alp)
ax[0, 1].errorbar(tp_525, tmcs_525, yerr=tsdmcs_525, fmt='^-', label=r"$\phi = 0.321$", alpha=alp)
ax[0, 1].errorbar(tp_700, tmcs_700, yerr=tsdmcs_700, fmt='^-', label=r"$\phi = 0.428$", alpha=alp)
ax[0, 1].legend(title='Triángulos', loc=2)
ax[0, 1].grid()
# ax[0, 1].set_ylim([0, 1.1])
ax[1, 0].errorbar(sp_350, smcs_350, yerr=ssdmcs_350, fmt='s-', label=r"$\phi = 0.214$", alpha=alp)
ax[1, 0].errorbar(sp_525, smcs_525, yerr=ssdmcs_525, fmt='s-', label=r"$\phi = 0.321$", alpha=alp)
ax[1, 0].errorbar(sp_700, smcs_700, yerr=ssdmcs_700, fmt='s-', label=r"$\phi = 0.428$", alpha=alp)
ax[1, 0].legend(title='Cuadrados', loc=2)
ax[1, 0].grid()
ax[1, 0].set_ylabel(r"$\max(C_s)/N_T$")
ax[1, 0].set_xlabel(r"$n_1 / n_2$")
ax[1, 1].errorbar(pp_350, pmcs_350, yerr=psdmcs_350, fmt='p-', label=r"$\phi = 0.214$", alpha=alp)
ax[1, 1].errorbar(pp_525, pmcs_525, yerr=psdmcs_525, fmt='p-', label=r"$\phi = 0.321$", alpha=alp)
ax[1, 1].errorbar(pp_700, pmcs_700, yerr=psdmcs_700, fmt='p-', label=r"$\phi = 0.428$", alpha=alp)
ax[1, 1].legend(title='Pentágonos', loc=2)
ax[1, 1].grid()
ax[1, 1].set_xlabel(r"$n_1 / n_2$")
plt.savefig("fig-01.pdf", bbox_inches="tight")

fig, ax = plt.subplots(1,3, sharey=True, figsize=(10, 6))

ax[0].errorbar(p_350, mcs_350, yerr=sdmcs_350, fmt='o-', label=r"Discos", alpha=alp)
ax[0].errorbar(tp_350, tmcs_350, yerr=tsdmcs_350, fmt='^-', label=r"Triángulos", alpha=alp)
ax[0].errorbar(sp_350, smcs_350, yerr=ssdmcs_350, fmt='s-', label=r"Cuadrados", alpha=alp)
ax[0].errorbar(pp_350, pmcs_350, yerr=psdmcs_350, fmt='p-', label=r"Pentágonos", alpha=alp)
ax[0].legend(title=r"$\phi = 0.214$", loc=2)
ax[0].set_ylabel(r"$\max(C_s)/N_T$")
ax[0].set_xlabel(r"$n_1 / n_2$")
ax[0].grid()
ax[1].errorbar(p_525, mcs_525, yerr=sdmcs_525, fmt='o-', label=r"Discos", alpha=alp)
ax[1].errorbar(tp_525, tmcs_525, yerr=tsdmcs_525, fmt='^-', label=r"Triángulos", alpha=alp)
ax[1].errorbar(sp_525, smcs_525, yerr=ssdmcs_525, fmt='s-', label=r"Cuadrados", alpha=alp)
ax[1].errorbar(pp_525, pmcs_525, yerr=psdmcs_525, fmt='p-', label=r"Pentágonos", alpha=alp)
ax[1].legend(title=r"$\phi = 0.321$", loc=2)
ax[1].set_xlabel(r"$n_1 / n_2$")
ax[1].grid()
ax[2].errorbar(p_700, mcs_700, yerr=sdmcs_700, fmt='o-', label=r"Discos", alpha=alp)
ax[2].errorbar(tp_700, tmcs_700, yerr=tsdmcs_700, fmt='^-', label=r"Triángulos", alpha=alp)
ax[2].errorbar(sp_700, smcs_700, yerr=ssdmcs_700, fmt='s-', label=r"Cuadrados", alpha=alp)
ax[2].errorbar(pp_700, pmcs_700, yerr=psdmcs_700, fmt='p-', label=r"Pentágonos", alpha=alp)
ax[2].legend(title=r"$\phi = 0.428$", loc=2)
ax[2].grid()
ax[2].set_xlabel(r"$n_1 / n_2$")
plt.savefig("fig-02.pdf", bbox_inches="tight")
